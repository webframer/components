/// Generated by Webframe.app | Do not edit this file directly! \\\
import { type } from '../types';
export interface TooltipProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Tooltip content
   */
  children: string | number | boolean | Function;
  /**
   * One of, or any combination of `['click', 'focus', 'hover']`
   */
  on?: 'click' | 'focus' | 'hover' | Array<'click' | 'focus' | 'hover'>;
  /**
   * Location of the Tooltip relative to the parent element
   */
  position?: 'top' | 'right' | 'bottom' | 'left';
  /**
   * Tooltip alignment relative to the `position`, default is center/middle alignment.
   * ```
   * For position 'top'/'bottom':
   * 'start' is left
   * 'end' is right
   * 
   * For position 'left'/'right':
   * 'start' is top
   * 'end' is bottom
   * ```
   */
  align?: 'start' | 'end';
  /**
   * Animation CSS class to apply
   */
  animation?: string;
  /**
   * Popup delay duration in milliseconds
   */
  delay?: type.Millisecond;
  /**
   * Whether to render Tooltip as child element of the parent Node, by default it renders as Portal
   */
  embedded?: boolean;
  /**
   * Tooltip pointer offset from the parent element, default is `16`
   */
  offset?: type.Px;
  /**
   * Whether to show Tooltip initially
   */
  openInitially?: boolean;
  /**
   * Handler(event, self: object) => void - before Tooltip opens
   */
  onOpen?: Function;
  /**
   * Handler(event, self: object) => void - before Tooltip closes
   */
  onClose?: Function;
  /**
   * Callback(self: object) => void - when Tooltip container has mounted
   */
  onMount?: Function;
  /**
   * Name of the theme mode to apply - must be one of the available theme styles.
   * 
   * Example: `inverted`, `light`, `dark`, `glass`, etc.
   */
  theme?: string;
  /**
   * Class name for the Tooltip container
   */
  tooltipClass?: string;
}
/**
 * Tooltip Component.
 * @see https://webframe.app/docs/ui/components/Tooltip
 * todo: component improvement 3 - RTL position/align support
 *
 * Logic:
 *  - `on='click'` toggles Tooltip when clicking inside the parent element,
 *    but not inside the Tooltip itself; and closes it when clicking outside,
 *    independent of the `focus` or `hover` states. By default, on `click` toggle is disabled,
 *    and closes the Tooltip when clicking anywhere, except inside the Tooltip.
 *
 *  - `on='focus`` opens Tooltip with specified delay when the parent element receives focus
 *    (except when focus is the result of the `click` event),
 *    and closes it on blur (unless the parent element is hovered and has on `hover` enabled).
 *    todo: component improvement 3 - complex logic for on blur events checks if the focused element
 *          is inside Tooltip and keeps it open. Then it subscribes to the focused element for
 *          on blur events to know when to close the Tooltip. If after blur of that element
 *          the parent did not get focus, then close the Tooltip.
 *
 *  - `on='hover` opens Tooltip with specified delay when the pointer enters the parent element,
 *    and closes it on pointer leave (unless the pointer enters the Tooltip itself,
 *    or the parent element has focus and on `focus` is enabled).
 *
 *  - `embedded={true}` renders Tooltip inside the parent element. By default, Tooltip renders
 *    inside a Portal, as direct child of document.body to ensure position-fixed works as expected.
 *
 * Notes:
 *  - Offset position should use margin to allow hovering over Tooltip, without loosing mouse hover
 *  - Rendering as Portal to cover use cases, such as absolute positioned parent with transform,
 *    because "position:fixed under something with a transform no longer has fixed behavior"
 *    @see https://stackoverflow.com/a/37953806
 *
 * Side notes;
 *    - Portal elements do not keep hover state on the parent element
 *    when transitioning the cursor from parent to the Tooltip.
 *    A test was done to check for the hitNodeFrom event coordinates, but it had flaky results.
 *    The Tooltip from the bottom would not capture the cursor sometimes.
 *    This was not due to CSS margin or gaps, because it did not work even with overlapping padding.
 *    => Need to capture mouse enter event on the tooltip itself with debounce to check open state.
 */
export function Tooltip(props: TooltipProps): JSX.Element;

/**
 * Convert `tooltip` prop of any type into props for Tooltip rendering.
 *
 * @param {any} tooltip - prop
 * @param {object|null} [defaultProps] - to use for Tooltip
 * @returns {object|null} props - ready for use with Tooltip component
 */
export function tooltipProps(tooltip: any, defaultProps?: object | null | undefined): object | null;
/**
 * Extend a Component with `tooltip` prop.
 * @example:
 *    const [tooltip] = useTooltip(props)
 *
 *    // Tooltip will open when hovering over `div` by default
 *    return <div>{children}{tooltip}</div>
 *
 * @param {object|{tooltip?: any}} props - copy of the Component with optional `tooltip` prop
 * @param {object|null} [defaultProps] - to use for Tooltip
 * @returns [tooltip: JSX.Element|null] - tooltip variable for inserting into markup
 */
export function useTooltip(props: object | {
    tooltip?: any;
}, defaultProps?: object | null | undefined): null[] | JSX.Element[];
export default TooltipMemo;
import { TooltipPropTypes } from '../types.js';
declare const TooltipMemo: React.NamedExoticComponent<TooltipProps>;
import * as React from 'react';
