/// Generated by Webframe.app | Do not edit this file directly! \\\
import { type } from '../types';
export interface ExpandProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Expand content (see [examples](#examples))
   */
  children: string | number | boolean | Function;
  /**
   * Expand/collapse direction
   */
  direction?: 'width' | 'height';
  /**
   * Animation duration in milliseconds
   */
  duration?: type.Millisecond;
  /**
   * Whether to always render <ExpandPanel> content
   */
  forceRender?: boolean;
  /**
   * Optional unique identifier, will be passed to `onChange`, default is React.useId() string
   */
  id?: string;
  /**
   * Optional index identifier, will be passed to `onChange` (used by [Accordion](Accordion))
   */
  index?: number;
  /**
   * Callback(event: Event, open: boolean, id: string, index?: number) when `open` state changes
   */
  onChange?: Function;
  /**
   * Whether to expand content
   */
  open?: boolean;
  /**
   * Whether to wrap `children` prop with <ExpandPanel> component (for use without <ExpandTab>)
   */
  asPanel?: boolean;
}
/**
 * Expand/Collapse - Accessible Component.
 * @see https://webframe.app/docs/ui/components/Expand
 *
 * Multiple Expand Components can be used to create an Accordion.
 * @example:
 *     import { Expand, ExpandPanel, ExpandTab } from '@webframer/ui'
 *
 *     // Using render props
 *     <Expand onChange={warn}>
 *       <ExpandTab row className='middle padding padding-v-smaller'>
 *         {({open}) => (<>
 *             <Icon className={open ? 'caret--expanded' : 'caret--collapsed'} name='caret' />
 *             <Text className='padding-h-smaller'>{slot}</Text>
 *         </>)}
 *       </ExpandTab>
 *       <ExpandPanel><Text>Expand Panel</Text></ExpandPanel>
 *     </Expand>
 *
 *     // Always render ExpandPanel content
 *     <Expand forceRender id='optional_id'>
 *       <ExpandTab>Toggle Expand/Collapse</ExpandTab>
 *       <ExpandPanel>{() => <Text>Render Function</Text>}</ExpandPanel>
 *     </Expand>
 *
 *     // Without ExpandTab and controlled `open` state
 *     <Expand asPanel open={true}>
 *       This content will be wrapped with '<ExpandPanel>' implicitly
 *     </Expand>
 *
 * Unlike Tabs, Expand does not have controlled/uncontrolled state - it has a hybrid state.
 * If `open` prop passed, it will be used as initial state.
 * When `open` prop changes, it will update accordingly.
 */
export function Expand(props: ExpandProps): JSX.Element;

export interface ExpandTabProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Expansion trigger element (see [examples](#examples))
   */
  children: string | number | boolean | Function;
  /**
   * Callback(event: Event, open: boolean, id: string | number, index?: number) when `open` state changes
   */
  onClick?: Function;
}
/**
 * Expand Tab Header -------------------------------------------------------------------------------
 */
export function ExpandTab(props: ExpandTabProps): JSX.Element;

export interface ExpandPanelProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Expandable content (see [examples](#examples))
   */
  children: string | number | boolean | Function;
  /**
   * Whether to always render content (for [SEO indexing](https://www.semrush.com/blog/html-hide-element/))
   */
  forceRender?: boolean;
}
/**
 * Expand Panel Content ----------------------------------------------------------------------------
 */
export function ExpandPanel(props: ExpandPanelProps): JSX.Element;

export default ExpandMemo;
declare const ExpandMemo: React.NamedExoticComponent<ExpandProps>;
import * as React from 'react';
