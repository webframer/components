/// Generated by Webframe.app | Do not edit this file directly! \\\
export interface TabsProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Selected tab index number or key string (for controlled state)
   */
  activeId?: string | number;
  /**
   * Default selected tab index number or key string (for uncontrolled state to load initially)
   */
  defaultId?: string | number;
  /**
   * Tab content (see example)
   */
  children?: string | number | boolean | Function;
  /**
   * Callback(event, activeId: string, lastId: string) whenever tab changes, where ids could be indices
   */
  onChange?: Function;
  /**
   * Whether to use Right-to-Left direction
   */
  rtl?: boolean;
  /**
   * Whether to use vertical orientation for Tabs
   */
  vertical?: boolean;
  /**
   * Whether to always render all Tab Panels - can be set individually (useful for SEO indexing)
   */
  forceRender?: boolean;
  /**
   * Alternative way to define Tabs and Panels as a single array
   */
  items?: Array<{
    id?: string;
    tab: string | number | boolean | {
      text?: string;
      icon?: string | {
        name: string;
        className?: string;
        style?: object;
      };
    };
    panel: string | number | boolean | Function | {
      children: string | number | boolean | Function;
    };
  }>;
  /**
   * TabList props to pass
   */
  tabListProps?: object;
}
/**
 * Tabs --------------------------------------------------------------------------------------------
 * @see https://webframe.app/docs/ui/components/Tabs
 * @todo: improve accessibility - set tabIndex={-1} for Tab to enable TAB focus on panel
 *    https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tabpanel_role
 * @example:
 *    // Uncontrolled state (Tab must be before TabPanel)
 *    <Tabs vertical defaultId={1}>
 *      <TabList>
 *        <Tab>Tab 1</Tab>
 *        <Tab>Tab 2</Tab>
 *      </TabList>
 *
 *      <TabPanel>Panel 1</TabPanel>
 *      <TabPanel>Panel 2</TabPanel>
 *    </Tabs>
 *
 *    // Controlled state (TabList is optional, this example omits it)
 *    <Tabs activeId='b' onChange={(e, activeId: string) => any}>
 *      <Tab id='a'>Tab A</Tab>
 *      <Tab id='b'>Tab B</Tab>
 *
 *      <TabPanel id='b'>{() => 'Panel B'}</TabPanel>
 *      <TabPanel id='a'>{() => 'Panel A'}</TabPanel>
 *    </Tabs>
 *
 *    // Using `items` array
 *    <Tabs items={[
 *         {
 *           tab: {
 *             icon: 'plus',
 *             text: 'Item 1',
 *           },
 *           panel: 'Panel 1 Text',
 *         },
 *         {
 *           tab: 'Item 2',
 *           panel: () => <Text>Panel 2 Function</Text>,
 *         },
 *         {
 *           tab: <><Icon name='globe' />Item 3</>,
 *           panel: <Text>Panel 3 Node</Text>,
 *         },
 *       ]} />
 */
export function Tabs(props: TabsProps): JSX.Element;

export interface TabListProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * CSS class names as string, separated by space
   */
  className?: string;
  role?: string;
}
/**
 * Tab List ----------------------------------------------------------------------------------------
 * Optional grouping of tabs.
 */
export function TabList(props: TabListProps): JSX.Element;

export interface TabProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Tab key string to pair with TabPanel, defaults to using Tab index as string
   */
  id?: string;
  /**
   * Callback(event, activeId: string)
   */
  onClick?: Function;
}
/**
 * Tab ---------------------------------------------------------------------------------------------
 */
export function Tab(props: TabProps): JSX.Element;

export interface TabPanelProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Tab key string to pair with TabPanel, defaults to using Tab index
   */
  id?: string;
  /**
   * Tab content
   */
  children?: string | number | boolean | Function;
  /**
   * Whether to always render the Tab Panel (useful for SEO indexing)
   */
  forceRender?: boolean;
  /**
   * Whether to make Tab Panel scrollable
   */
  scroll?: boolean;
}
/**
 * Tab Panel ---------------------------------------------------------------------------------------
 */
export function TabPanel(props: TabPanelProps): JSX.Element | null;

export const TabBody: (props: ViewProps) => JSX.Element;
export default TabsMemo;
declare const TabsMemo: React.NamedExoticComponent<TabsProps>;
import * as React from 'react';
