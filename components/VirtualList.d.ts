/// Generated by Webframe.app | Do not edit this file directly! \\\
import { type } from '../types';
export interface VirtualListProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * List of items to render (can be an array of any value)
   */
  items: Array<any>;
  /**
   * Number of items to render initially, or when `items` prop changes
   */
  initialItems?: type.UnsignedInteger;
  /**
   * Whether to render as grid (equivalent to `scrollClass='row top wrap'` for `col` container)
   */
  grid?: boolean;
  /**
   * Whether to render in horizontal layout direction
   */
  row?: boolean;
  /**
   * Function(item, index, items, self) to render each item in the list, default is `renderProp()`
   */
  renderItem?: Function;
  /**
   * Percentage of the visible list container size to pre-render items around.
   * - Set to `true` to use automatic calculation based on scroll speed (this is default).
   * - Set to `0` to only render items when they scroll into view.
   * - Set to `1` (ie. 100%) to render items within an area that is 3x the size of the view.
   * ```
   * ┌─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─┐
   * │            ↑            │
   * │    renderRadius: 100%   │
   * │            ↓            │
   * ┌─────────────────────────┐
   * │          start          │
   * │  visible items in view  │
   * │           end           │
   * └─────────────────────────┘
   * │            ↑            │
   * │    renderRadius: 100%   │
   * │            ↓            │
   * └─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─┘
   * ```
   */
  renderRadius?: boolean | number;
}
/**
 * List rendering of large Arrays.
 * @see https://webframe.app/docs/ui/components/VirtualList
 *
 * Features:
 *  - Dynamic list container and item sizes (no need to specify width/height)
 *  - List items can expand/collapse in width/height like usual
 *  - Behaves like Infinite Scroll (only renders items in view or close to it).
 *
 * How it works:
 *  1. On initial render, `initialItems` number is rendered.
 *  2. On mount, items within `renderRadius` of the scrollable area are rendered.
 *  3. Items that become invisible but have been rendered are replaced with offset divs.
 *
 * Notes:
 *  - Chrome freezes when inspecting 10,000 empty divs
 */
export function VirtualList(props: VirtualListProps): JSX.Element;

export default VirtualListMemo;
export const VirtualItem: React.MemoExoticComponent<typeof VirtualListItem>;
declare const VirtualListMemo: React.NamedExoticComponent<VirtualListProps>;
/**
 * Function Component to render each item in the Virtual List
 * @param {object} props
 * @returns {JSX.Element | null}
 */
declare function VirtualListItem({ children }: object): JSX.Element | null;
declare namespace VirtualListItem {
    export namespace propTypes_1 {
        let children: any;
    }
    export { propTypes_1 as propTypes };
}
import * as React from 'react';
