/// Generated by Webframe.app | Do not edit this file directly! \\\
import { type } from '../types';
export interface AccordionProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Expandable content (see example)
   */
  children: string | number | boolean | Function;
  /**
   * Expand/Collapse animation duration in milliseconds
   */
  duration?: type.Millisecond;
  /**
   * Whether to allow opening multiple Accordion panels at once
   */
  multiple?: boolean;
  /**
   * Callback(event: Event, open: boolean, id: string, index?: number) when `open` state changes
   */
  onChange?: Function;
  /**
   * Whether to have all content expanded by default
   */
  open?: boolean;
  /**
   * Whether to always render ExpandPanel content (useful for SEO indexing)
   */
  forceRender?: boolean;
}
/**
 * List of Expandable/Collapsible content sections
 * @see https://webframe.app/docs/ui/components/Accordion
 * @see https://webframe.app/docs/ui/components/Expand
 *
 * @example:
 *    import { Accordion, Expand, ExpandPanel, ExpandTab } from '@webframer/ui'
 *
 *    <Accordion>
 *
 *      <Expand>
 *        <ExpandTab>{...}</ExpandTab>
 *        <ExpandPanel>{...}</ExpandPanel>
 *      </Expand>
 *
 *      <Expand>
 *        <ExpandTab>{...}</ExpandTab>
 *        <ExpandPanel>{...}</ExpandPanel>
 *      </Expand>
 *
 *    </Accordion>
 *
 * Logic:
 *  - To keep separation of concerns, and to avoid Expand using incorrect Accordion context,
 *    Shallow clone direct children (i.e. Expand components) to pass Accordion props.
 */
export function Accordion(props: AccordionProps): JSX.Element;

export default AccordionMemo;
declare const AccordionMemo: React.NamedExoticComponent<AccordionProps>;
import * as React from 'react';
