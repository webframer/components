{
  "Accordion": {
    "propTypes": {
      "children": {
        "value": "type.NodeOrFunction.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Expandable content (see example)"
          }
        ]
      },
      "duration": {
        "value": "type.Millisecond",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Expand/Collapse animation duration in milliseconds"
          }
        ]
      },
      "multiple": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to allow opening multiple Expand components at once"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Callback(event: Event, open: boolean, id: string, index?: number) when `open` state changes"
          }
        ]
      },
      "open": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to expand all ExpandPanel content"
          }
        ]
      },
      "forceRender": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to always render ExpandPanel content (useful for SEO indexing)"
          },
          {
            "type": "CommentLine",
            "value": " @see https://www.semrush.com/blog/html-hide-element/"
          }
        ]
      }
    }
  },
  "Badge": {
    "propTypes": {
      "count": {
        "value": "type.Number.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Badge count"
          }
        ]
      },
      "maxDigits": {
        "value": "type.Number",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Maximum number of count digits to display"
          }
        ]
      }
    },
    "defaultProps": {
      "maxDigits": {
        "value": "2"
      }
    }
  },
  "Breadcrumb": {
    "propTypes": {
      "items": {
        "value": "type.ListOf(type.OneOf([type.Obj({ icon: type.String, text: type.String.isRequired,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // Path name or URL to link to\n  to: type.String }), type.NodeOrFunction]))",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Breadcrumb item"
          }
        ]
      },
      "children": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom breadcrumb items"
          }
        ]
      }
    }
  },
  "Button": {
    "propTypes": {
      "children": {
        "value": "type.NodeOrFunction.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Button content"
          }
        ]
      },
      "className": {
        "value": "type.ClassName"
      },
      "style": {
        "value": "type.Style"
      },
      "active": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to add `active` css class"
          }
        ]
      },
      "disabled": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether the button is disabled"
          }
        ]
      },
      "loading": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to show loading state"
          }
        ]
      },
      "type": {
        "value": "type.Enum(['button', 'submit'])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Button type"
          }
        ]
      },
      "tooltip": {
        "value": "type.Tooltip"
      },
      "_ref": {
        "value": "type.Ref"
      }
    }
  },
  "Buttons": {
    "propTypes": {
      "items": {
        "value": "type.ListOf(type.Obj({ icon: type.String, children: type.Any, active: type.Boolean, tooltip: type.Tooltip,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // second tooltip for <span/> inside each button\n  tooltipInner: type.Tooltip\n  // ...other <Button/> props\n})).isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " List of each Button props"
          }
        ]
      },
      "vertical": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to render Buttons vertically"
          }
        ]
      },
      "children": {
        "value": "type.Node",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Extra inner content to render after buttons"
          }
        ]
      }
    }
  },
  "Checkbox": {
    "propTypes": {
      "type": {
        "value": "type.Enum(['toggle', 'checkbox'])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Input type"
          }
        ]
      },
      "id": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Unique identifier, default is string created from React.useId()"
          }
        ]
      },
      "label": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Text to use for type='checkbox', uses `id` if not given"
          }
        ]
      },
      "labelTrue": {
        "value": "type.Node",
        "comments": [
          {
            "type": "CommentLine",
            "value": " UI to show for checked state of type='toggle'"
          }
        ]
      },
      "labelFalse": {
        "value": "type.Node",
        "comments": [
          {
            "type": "CommentLine",
            "value": " UI to show for unchecked state of type='toggle'"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Input onChange callback(checked: boolean, name: string, event: Event)"
          }
        ]
      },
      "value": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Internal value for controlled checked or unchecked state"
          }
        ]
      },
      "valueTrue": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Internal value to assign to checked case"
          }
        ]
      },
      "valueFalse": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Internal value to assign to unchecked case"
          }
        ]
      },
      "defaultValue": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Initial value for uncontrolled checked or unchecked state"
          }
        ]
      },
      "danger": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether Label for unchecked state should have 'danger' CSS class"
          }
        ]
      },
      "readonly": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to disable toggling state"
          }
        ]
      }
    },
    "defaultProps": {
      "type": {
        "value": "'checkbox'"
      },
      "valueTrue": {
        "value": "true"
      },
      "valueFalse": {
        "value": "false"
      }
    }
  },
  "DropdownMenu": {
    "defaultProps": {
      "iconClose": {
        "value": "'cross-sm'"
      },
      "iconOpen": {
        "value": "'more'"
      }
    },
    "propTypes": {
      "children": {
        "value": "type.NodeOrFunction.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Dropdown Menu content to render when open"
          }
        ]
      },
      "open": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to open the Dropdown Menu initially"
          }
        ]
      },
      "btnProps": {
        "value": "type.Obj(btnPropTypes)",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Three-dots Button props"
          }
        ]
      },
      "iconProps": {
        "value": "type.Obj(iconPropTypes)",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Three-dots Button Icon props"
          }
        ]
      },
      "iconOpen": {
        "value": "type.Icon"
      },
      "iconClose": {
        "value": "type.Icon"
      },
      "menu": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function({open: boolean, initialOpen: boolean, props, state}) => JSX - custom Menu renderer"
          }
        ]
      },
      "tooltipProps": {
        "value": "type.Obj(tooltipPropTypes)",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Dropdown Tooltip props"
          }
        ]
      },
      "onMount": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(self: object) when this component has mounted"
          }
        ]
      },
      "className": {
        "value": "type.ClassName"
      },
      "style": {
        "value": "type.Style"
      }
    }
  },
  "ErrorContent": {
    "propTypes": {
      "items": {
        "value": "ErrorTable.propTypes.items"
      }
    }
  },
  "ErrorTable": {
    "propTypes": {
      "items": {
        "value": "type.ListOf(type.OneOf([type.String, type.Number, type.Obj({ id: type.Any, status: type.Number, title: type.String, detail: type.String, message: type.String })])).isRequired"
      }
    }
  },
  "Expand": {
    "propTypes": {
      "children": {
        "value": "type.NodeOrFunction.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Expand content (see [examples](#examples))"
          }
        ]
      },
      "direction": {
        "value": "type.Enum(['width', 'height'])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Expand/collapse direction"
          }
        ]
      },
      "duration": {
        "value": "type.Millisecond",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Animation duration in milliseconds"
          }
        ]
      },
      "forceRender": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to always render <ExpandPanel> content"
          }
        ]
      },
      "id": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Optional unique identifier, will be passed to `onChange`, default is React.useId() string"
          }
        ]
      },
      "index": {
        "value": "type.Number",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Optional index identifier, will be passed to `onChange` (used by Accordion)"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Callback(event: Event, open: boolean, id: string, index?: number) when `open` state changes"
          }
        ]
      },
      "open": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to expand content"
          }
        ]
      },
      "asPanel": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to wrap `children` prop with <ExpandPanel> component (for use without <ExpandTab>)"
          }
        ]
      }
    },
    "defaultProps": {
      "direction": {
        "value": "'height'"
      },
      "duration": {
        "value": "300"
      },
      "role": {
        "value": "'tablist'"
      }
    }
  },
  "ExpandTab": {
    "propTypes": {
      "children": {
        "value": "type.NodeOrFunction.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Expansion trigger element (see [examples](#examples))"
          }
        ]
      },
      "onClick": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Callback(event: Event, open: boolean, id: string | number, index?: number) when `open` state changes"
          }
        ]
      }
    },
    "defaultProps": {
      "role": {
        "value": "'tab'"
      },
      "_nodrag": {
        "value": "''"
      }
    }
  },
  "ExpandPanel": {
    "propTypes": {
      "children": {
        "value": "type.NodeOrFunction.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Expandable content (see [examples](#examples))"
          }
        ]
      },
      "forceRender": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to always render content (for [SEO indexing](https://www.semrush.com/blog/html-hide-element/))"
          }
        ]
      }
    },
    "defaultProps": {
      "role": {
        "value": "'tabpanel'"
      },
      "_nodrag": {
        "value": "''"
      }
    }
  },
  "Highlighter": {
    "defaultProps": {},
    "propTypes": {
      "children": {
        "value": "type.String.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Source code string"
          }
        ]
      },
      "language": {
        "value": "type.String.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Code block language"
          }
        ]
      },
      "PreTag": {
        "value": "type.OneOf([type.String, type.JSXElementType]).isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " The element that wraps around the `<code>` block"
          }
        ]
      }
    }
  },
  "IconRef": {
    "propTypes": {
      "name": {
        "value": "type.Icon.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Icon name, can be empty string to be styled with custom CSS"
          }
        ]
      },
      "className": {
        "value": "type.ClassName"
      },
      "style": {
        "value": "type.Style"
      },
      "font": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " If true, use Font Icon, instead of CSS Mask Icon - the default"
          }
        ]
      }
    }
  },
  "ImageRef": {
    "defaultProps": {
      "name": {
        "value": "'image.svg'"
      },
      "loading": {
        "value": "'lazy'",
        "comments": [
          {
            "type": "CommentLine",
            "value": " to prevent error and for better UX"
          }
        ]
      },
      "decoding": {
        "value": "'async'"
      }
    },
    "propTypes": {
      "className": {
        "value": "type.ClassName",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Optional CSS classes"
          }
        ]
      },
      "style": {
        "value": "type.Style"
      },
      "alt": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Alternative text description of the image"
          }
        ]
      },
      "name": {
        "value": "type.Src",
        "comments": [
          {
            "type": "CommentLine",
            "value": " File name (required if `src` or `alt` not defined)"
          }
        ]
      },
      "path": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Directory path to the file (without file name) if `src` not given"
          }
        ]
      },
      "src": {
        "value": "type.Src",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Image file source URL or directory path"
          }
        ]
      },
      "loading": {
        "value": "type.Enum(['eager', 'lazy'])"
      },
      "decoding": {
        "value": "type.Enum(['auto', 'async', 'sync'])"
      }
    }
  },
  "ImageSwatch": {
    "defaultProps": {
      "name": {
        "value": "''"
      }
    },
    "propTypes": {
      "src": {
        "value": "type.UrlOrBase64OrPreview.isRequired",
        "comments": [
          {
            "type": "CommentJSDoc",
            "value": " Full Path, URL, Base64 or Preview String object of Image file "
          }
        ]
      },
      "small": {
        "value": "type.Boolean"
      },
      "large": {
        "value": "type.Boolean"
      },
      "className": {
        "value": "type.String"
      },
      "style": {
        "value": "type.Object"
      }
    }
  },
  "Input": {
    "defaultProps": {
      "type": {
        "value": "'text'"
      },
      "helpTransition": {
        "value": "true"
      }
    },
    "propTypes": {
      "id": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Unique input identifier, default is string created from React.useId()"
          }
        ]
      },
      "info": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Help information to show after the Input"
          }
        ]
      },
      "error": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Error message to show after the Input (ex. on validation fail)"
          }
        ]
      },
      "helpTransition": {
        "value": "type.OneOf([type.Boolean, type.Object])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to enable input info/error animation transition (or expandCollapse transition options)"
          }
        ]
      },
      "tooltip": {
        "value": "type.Tooltip",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Tooltip props or value to display as tooltip"
          }
        ]
      },
      "controls": {
        "value": "type.ObjectOf(type.OneOf([type.JSXElementType, type.Promise]))",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Map of Input Control components by their `type` string to use for rendering"
          }
        ]
      },
      "controlProps": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Props to pass to Input Control component"
          }
        ]
      }
    }
  },
  "InputNative": {
    "defaultProps": {
      "type": {
        "value": "'text'"
      }
    },
    "propTypes": {
      "compact": {
        "value": "type.OneOf([type.Boolean, type.Number])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to use minimal width that fits content, pass number for additional character offset"
          }
        ]
      },
      "controlledValue": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to lock input value when `value` prop is given"
          }
        ]
      },
      "defaultValue": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Initial value for uncontrolled state"
          }
        ]
      },
      "value": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Internal value for controlled state"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on input value changes"
          }
        ]
      },
      "onFocus": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on input focus"
          }
        ]
      },
      "onBlur": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on input blur"
          }
        ]
      },
      "onRemove": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on input removal."
          },
          {
            "type": "CommentLine",
            "value": " `onChange` handler will fire after with `null` as value, unless event.preventDefault()."
          },
          {
            "type": "CommentLine",
            "value": " To let `onChange` update form instance first before removing the field,"
          },
          {
            "type": "CommentLine",
            "value": " use setTimeout to execute code inside `onRemove` handler."
          }
        ]
      },
      "label": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Label to show before the input (or after with `reverse` true)"
          }
        ]
      },
      "loading": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether input is loading"
          }
        ]
      },
      "format": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value, name?, event?, self) => string - internal value formatter for native input (UI display)"
          }
        ]
      },
      "parse": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value, name?, event, self) => any - value parser for onChange/onBlur/onFocus handlers"
          }
        ]
      },
      "normalize": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value, name?, event, self) => string - internal value normalizer to sanitize user input"
          }
        ]
      },
      "prefix": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Prefix to show before the Input value text"
          }
        ]
      },
      "suffix": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Suffix to show after the Input value text (value must be non-empty)"
          }
        ]
      },
      "stickyPlaceholder": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to persist placeholder as user enters text"
          }
        ]
      },
      "noSpellCheck": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to disable spell check and autocorrection"
          }
        ]
      },
      "childBefore": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom UI to render before input node (inside .input wrapper with focus state)"
          }
        ]
      },
      "childAfter": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom UI to render after input node (inside .input wrapper with focus state)"
          }
        ]
      },
      "icon": {
        "value": "type.OneOf([type.String, type.Object, type.Boolean, type.NodeOrFunction])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom Icon name or props to render before input node"
          }
        ]
      },
      "iconEnd": {
        "value": "type.OneOf([type.String, type.Object, type.Boolean, type.NodeOrFunction])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom Icon name or props to render after input node (if `onRemove` not defined)"
          }
        ]
      }
    }
  },
  "InputView": {
    "defaultProps": {
      "viewType": {
        "value": "'view'"
      },
      "controls": {
        "value": "{ 'view': ViewWithLabel }",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Use View, because View does not allow text selection, and has style conflicts"
          }
        ]
      },
      "Input": {
        "value": "Input"
      },
      "inputClicks": {
        "value": "1"
      },
      "inputOnlyAttrs": {
        "value": "[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 'controls', 'error', 'info', 'helpTransition', 'type',\n'compact', 'controlledValue', 'defaultValue', 'value', 'onRemove', 'format', 'parse', 'prefix', 'suffix', 'stickyPlaceholder', 'noSpellCheck',\n// 'childBefore', 'childAfter',\n'icon', 'iconEnd']"
      }
    },
    "propTypes": {
      "viewType": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " View Component `type` to use (as defined by Input `controls` prop)"
          }
        ]
      },
      "Input": {
        "value": "type.JSXElementType",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Universal Input Component to use (must render inner `<input/>` by `type`, including `viewType`)"
          }
        ]
      },
      "inputClicks": {
        "value": "type.Enum([1, 2])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Number of clicks to turn into Input, set as 2 for Double Click, default is single click"
          }
        ]
      },
      "inputOnlyAttrs": {
        "value": "type.ListOf(type.String)",
        "comments": [
          {
            "type": "CommentLine",
            "value": " List of props to remove when in View state (ie. for Input state only)"
          }
        ]
      },
      "inputProps": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Props to use for Input state only"
          }
        ]
      },
      "viewProps": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Props to use for View state only"
          }
        ]
      }
    }
  },
  "JsonView": {
    "propTypes": {
      "data": {
        "value": "type.Collection.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " JSON data to show as JavaScript Object"
          }
        ]
      },
      "open": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to expand all nodes"
          }
        ]
      },
      "theme": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Color scheme"
          }
        ]
      }
    },
    "defaultProps": {
      "theme": {
        "value": "defaultTheme"
      }
    }
  },
  "Loader": {
    "propTypes": {
      "loading": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to show this Component or not"
          }
        ]
      },
      "size": {
        "value": "type.SizeModifier",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Spinner size"
          }
        ]
      },
      "className": {
        "value": "type.ClassName"
      },
      "iconClass": {
        "value": "type.ClassName"
      }
    }
  },
  "Markdown": {
    "propTypes": {
      "children": {
        "value": "type.String.isRequired"
      },
      "components": {
        "value": "type.ObjectOf(type.Function)",
        "comments": [
          {
            "type": "CommentLine",
            "value": " key -> value pairs where `key` is element tag name, and `value` is the render function"
          },
          {
            "type": "CommentLine",
            "value": " @see https://github.com/remarkjs/react-markdown#use-custom-components-syntax-highlight"
          }
        ]
      },
      "remarkPlugins": {
        "value": "type.ListOf(type.Any)"
      },
      "rehypePlugins": {
        "value": "type.ListOf(type.Any)"
      },
      "remarkRehypeOptions": {
        "value": "type.Any"
      }
    }
  },
  "Select": {
    "defaultProps": {
      "focusIndex": {
        "value": "0"
      },
      "query": {
        "value": "''",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Default to empty string to prevent React controlled input error"
          }
        ]
      },
      "virtualOptionsMinimum": {
        "value": "50"
      }
    },
    "propTypes": {
      "options": {
        "value": "type.Options.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Selectable values"
          }
        ]
      },
      "optionProps": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Individual option props to pass"
          }
        ]
      },
      "optionsProps": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Options container props to pass"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?, self) when selected value changes"
          }
        ]
      },
      "onFocus": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on select focus"
          }
        ]
      },
      "onBlur": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on select blur"
          }
        ]
      },
      "onRemove": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on input removal."
          },
          {
            "type": "CommentLine",
            "value": " `onChange` handler will fire after with `null` as value, unless event.preventDefault()."
          },
          {
            "type": "CommentLine",
            "value": " To let `onChange` update form instance first before removing the field,"
          },
          {
            "type": "CommentLine",
            "value": " use setTimeout to execute code inside `onRemove` handler."
          }
        ]
      },
      "onSearch": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, query: string, name?, self) when search input value changes"
          }
        ]
      },
      "onSelect": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?, self) when an option gets focus"
          }
        ]
      },
      "onClickValue": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?, self) when a multiple selected value is clicked"
          }
        ]
      },
      "onMount": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(self: object) when this component has mounted"
          }
        ]
      },
      "addOption": {
        "value": "type.OneOf([type.Boolean, type.Object, type.Function])",
        "comments": [
          {
            "type": "CommentJSDoc",
            "value": "\n Whether to allow users to add new options (in combination with search)\n Set to `true` to allow adding new term.\n Set to `object` of props to pass to new `option` object when selected.\n Set to `function(query: string) => boolean | object` for conditional logic.\n   "
          }
        ]
      },
      "compact": {
        "value": "type.OneOf([type.Boolean, type.Number])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to use minimal width that fits content, pass number for additional character offset"
          }
        ]
      },
      "controlledValue": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to lock selected value when `value` prop is given"
          }
        ]
      },
      "defaultOpen": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to open options initially"
          }
        ]
      },
      "excludeSelected": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to filter out selected value from options dropdown"
          }
        ]
      },
      "format": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value, name?, self) => any - Serializer for internal Select state value"
          }
        ]
      },
      "parse": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value, name?, self, event) => any - Deserializer for onChange/onBlur/onFocus value"
          },
          {
            "type": "CommentLine",
            "value": " Select always stores the `value` or `value[]` internally for its logic, like fuzzy search"
          }
        ]
      },
      "normalize": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(query, name?, event, self) => string - search query normalizer to sanitize user input"
          }
        ]
      },
      "forceRender": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to always render options, even when closed"
          }
        ]
      },
      "icon": {
        "value": "type.OneOf([type.String, type.Object, type.Boolean, type.NodeOrFunction])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom Icon name or props to render before input node."
          },
          {
            "type": "CommentLine",
            "value": " Default is 'dropdown' icon at the end, or 'search' icon at the start if `search = true`"
          },
          {
            "type": "CommentLine",
            "value": " and icons are undefined or null."
          }
        ]
      },
      "iconEnd": {
        "value": "type.OneOf([type.String, type.Object, type.Boolean, type.NodeOrFunction])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom Icon name or props to render after input node"
          }
        ]
      },
      "multiple": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to allow multiple selections and store values as array"
          }
        ]
      },
      "fixed": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to set options with position fixed on open to remain visible inside Scroll"
          }
        ]
      },
      "query": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Default search query to use"
          }
        ]
      },
      "queryParser": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(query) => string - parse function for internal query string used for search"
          }
        ]
      },
      "search": {
        "value": "type.OneOf([type.Boolean, type.Function])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to enable search by options, pass Handler(query, options) => value for custom search"
          }
        ]
      },
      "searchNonce": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Unique ID to trigger search options re-indexing"
          }
        ]
      },
      "searchOptions": {
        "value": "type.Obj({ distance: type.Integer, threshold: type.Percent,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /**\n   * Goes along with `queryParser`\n   * @example:\n   *    // Filter options to include search `query`\n   *    queryParser: (query) => `'${query}`\n   *    searchOptions: {useExtendedSearch: true, ignoreLocation: true}\n   */useExtendedSearch: type.Boolean })",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Fuzzy [search options](https://fusejs.io/api/options.html)"
          }
        ]
      },
      "upward": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether options menu should try to open from the top, default is from the bottom"
          }
        ]
      },
      "value": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Selected value(s) - if passed, becomes a controlled component"
          }
        ]
      },
      "renderSelected": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value: any, index: number, array, self) => JSX - to render selected option"
          }
        ]
      },
      "noOptionsMsg": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Message string to display when there are no options left for multiple select, or"
          },
          {
            "type": "CommentLine",
            "value": " Handler(self) => string - function to render message dynamically (example: using query)"
          }
        ]
      },
      "virtualOptionsMinimum": {
        "value": "type.UnsignedInteger",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Minimum number of Select options to use Virtual List renderer to optimize for performance"
          }
        ]
      }
    }
  },
  "SelectNested": {
    "defaultProps": {
      "optionProps": {
        "value": "{ className: 'no-padding !no-border',\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /**\n   * Override SelectOption `onClick` for keyboard accessibility.\n   * This will prevent Select from firing `onChange` event on click,\n   * because `selectOption()` is not fired.\n   * However, if the user presses Enter, `selectOption()` is fired internally without click,\n   * and will call Select.onChange event.\n   * So handle Select.onChange for accessibility, and leave this function empty\n   * to prevent firing Select.onChange twice.\n   */onClick() {} }"
      },
      "nestedIcon": {
        "value": "'caret'",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Chevron-right for LTR direction"
          }
        ]
      },
      "nestedProps": {
        "value": "{ className: 'fill-width' }"
      }
    },
    "propTypes": {
      "nestedIcon": {
        "value": "type.Icon",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Icon indicator for nested collections"
          }
        ]
      },
      "options": {
        "value": "type.OneOf([type.List, type.ListOf(type.Option), type.Object, type.ObjectOf(type.Option)]).isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Any object or array, or a deeply nested collection of `type.Option`"
          }
        ]
      },
      "formatKey": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(key: string, keyPath: string[], self) => string - to format key path for display"
          }
        ]
      },
      "filterValue": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value: any, key: string, keyPath: string[], self) => boolean - true to render value, false to skip"
          }
        ]
      }
    }
  },
  "SelectOption": {
    "propTypes": {
      "option": {
        "value": "type.Option.isRequired"
      },
      "onClick": {
        "value": "type.Function.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, option) => void - when option is clicked"
          }
        ]
      },
      "onBlur": {
        "value": "type.Function.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, option) => void - on option blur event"
          }
        ]
      },
      "onFocus": {
        "value": "type.Function.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, option) => void - on option focus event"
          }
        ]
      },
      "focused": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether the current option has focus"
          }
        ]
      },
      "selected": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether the current option is selected"
          }
        ]
      },
      "search": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether Select has search enabled to highlight matched query"
          }
        ]
      },
      "query": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Current Select search query to highlight matches"
          }
        ]
      }
    }
  },
  "ShadowDOM": {
    "propTypes": {
      "mode": {
        "value": "type.Enum(['open', 'closed'])"
      },
      "delegatesFocus": {
        "value": "type.Boolean"
      },
      "styleSheets": {
        "value": "type.ListOf(type.InstanceOf(globalThis.CSSStyleSheet))",
        "comments": [
          {
            "type": "CommentLine",
            "value": " From [CSSStyleSheet()](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/adoptedStyleSheets)"
          }
        ]
      },
      "ssr": {
        "value": "type.Boolean"
      },
      "children": {
        "value": "type.NodeOrFunction"
      }
    },
    "defaultProps": {
      "mode": {
        "value": "'open'"
      },
      "delegatesFocus": {
        "value": "false"
      },
      "styleSheets": {
        "value": "[]"
      }
    }
  },
  "Spacer": {
    "propTypes": {
      "size": {
        "value": "type.SizeModifier"
      }
    }
  },
  "Spinner": {
    "propTypes": {
      "size": {
        "value": "type.SizeModifier"
      },
      "color": {
        "value": "type.Enum(['primary', 'secondary', 'tertiary', 'light', 'dark', 'white', 'black'])"
      },
      "className": {
        "value": "PropTypes.string"
      }
    }
  },
  "Switch": {
    "propTypes": {
      "id": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Unique identifier, default is string created from React.useId()"
          }
        ]
      },
      "controlledValue": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to lock input value when `value` prop is given"
          }
        ]
      },
      "defaultValue": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Initial value for uncontrolled checked or unchecked state"
          }
        ]
      },
      "label": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Label to show before the switch (or after Switch with `reverse` true)"
          }
        ]
      },
      "format": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value, name?, event?, self) => boolean - Input value formatter for input.checked"
          }
        ]
      },
      "parse": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value: boolean, name?, event, self) => any - value parser for onChange/onBlur/onFocus handlers"
          }
        ]
      },
      "checkedLabel": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " UI to show for checked state inside the Switch, defaults to a checkmark icon"
          }
        ]
      },
      "uncheckedLabel": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " UI to show for unchecked state inside the Switch, defaults to empty Spacer"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on input value changes"
          }
        ]
      },
      "onFocus": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on input focus"
          }
        ]
      },
      "onBlur": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on input blur"
          }
        ]
      },
      "value": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Internal value for controlled checked or unchecked state"
          }
        ]
      }
    }
  },
  "Tabs": {
    "propTypes": {
      "activeId": {
        "value": "type.OneOf([type.String, type.Number])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Selected tab index number or key string (for controlled state)"
          }
        ]
      },
      "defaultId": {
        "value": "type.OneOf([type.String, type.Number])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Default selected tab index number or key string (for uncontrolled state to load initially)"
          }
        ]
      },
      "children": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Tab content (see example)"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Callback(event, activeId: string, lastId: string) whenever tab changes, where ids could be indices"
          }
        ]
      },
      "rtl": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to use Right-to-Left direction"
          }
        ]
      },
      "vertical": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to use vertical orientation for Tabs"
          }
        ]
      },
      "forceRender": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to always render all Tab Panels - can be set individually (useful for SEO indexing)"
          },
          {
            "type": "CommentLine",
            "value": " @see https://www.semrush.com/blog/html-hide-element/"
          }
        ]
      },
      "items": {
        "value": "type.ListOf(type.Obj({\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // Optional unique identifier for the Tab and Panel\n  id: type.String,\n  // Tab Label - clickable buttons\n  tab: type.OneOf([type.String, type.Number, type.Node, type.Obj({ text: type.String, icon: type.OneOf([type.String, type.Obj({\n\n\n\n\n\n\n\n\n      // Icon name and other ...props\n      name: type.String.isRequired, className: type.String, style: type.Object })])\n\n\n\n\n    // ...other props to pass to Tab\n  })]).isRequired,\n\n  // Tab Content\n  panel: type.OneOf([type.NodeOrFunction, type.Obj({\n\n\n    // Child node(s) and other props to pass to TabPanel\n    children: type.NodeOrFunction.isRequired })]).isRequired }))",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Alternative way to define Tabs and Panels as a single array"
          }
        ]
      },
      "tabListProps": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " TabList props to pass"
          }
        ]
      }
    }
  },
  "TabList": {
    "defaultProps": {
      "className": {
        "value": "'no-scrollbar'"
      },
      "role": {
        "value": "'tablist'"
      }
    }
  },
  "Tab": {
    "propTypes": {
      "id": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Tab key string to pair with TabPanel, defaults to using Tab index as string"
          }
        ]
      },
      "onClick": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Callback(event, activeId: string)"
          }
        ]
      }
    },
    "defaultProps": {
      "role": {
        "value": "'tab'",
        "comments": [
          {
            "type": "CommentLine",
            "value": " @see: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tab_role"
          }
        ]
      },
      "_nodrag": {
        "value": "''"
      }
    }
  },
  "TabPanel": {
    "propTypes": {
      "id": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Tab key string to pair with TabPanel, defaults to using Tab index"
          }
        ]
      },
      "children": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Tab content"
          }
        ]
      },
      "forceRender": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to always render the Tab Panel (useful for SEO indexing)"
          },
          {
            "type": "CommentLine",
            "value": " @see https://www.semrush.com/blog/html-hide-element/"
          }
        ]
      },
      "scroll": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to make Tab Panel scrollable"
          }
        ]
      }
    },
    "defaultProps": {
      "role": {
        "value": "'tabpanel'"
      },
      "_nodrag": {
        "value": "''"
      }
    }
  },
  "Text": {
    "propTypes": {
      "children": {
        "value": "type.NodeOrFunction"
      },
      "className": {
        "value": "type.ClassName"
      },
      "style": {
        "value": "type.Style"
      },
      "tooltip": {
        "value": "type.Tooltip"
      },
      "_ref": {
        "value": "type.Ref"
      }
    }
  },
  "TextArea": {
    "propTypes": {
      "compact": {
        "value": "type.OneOf([type.Boolean, type.Number])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to use minimal width that fits content, pass number for additional character offset"
          }
        ]
      },
      "defaultValue": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Initial value for uncontrolled state"
          }
        ]
      },
      "value": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Internal value for controlled state"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on textarea value changes"
          }
        ]
      },
      "onFocus": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on textarea focus"
          }
        ]
      },
      "onBlur": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on textarea blur"
          }
        ]
      },
      "onRemove": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, value: any, name?: string, self) on textarea removal."
          },
          {
            "type": "CommentLine",
            "value": " `onChange` handler will fire after with `null` as value, unless event.preventDefault()."
          },
          {
            "type": "CommentLine",
            "value": " To let `onChange` update form instance first before removing the field,"
          },
          {
            "type": "CommentLine",
            "value": " use setTimeout to execute code inside `onRemove` handler."
          }
        ]
      },
      "label": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Label to show before the textarea (or after with `reverse` true)"
          }
        ]
      },
      "loading": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether textarea is loading"
          }
        ]
      },
      "format": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value, name?, event?, self) => string - value formatter for UI display"
          }
        ]
      },
      "parse": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(value, name?, event, self) => any - Parser for internal value for onChange"
          }
        ]
      },
      "resize": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to automatically resize height style to fit content"
          }
        ]
      },
      "noSpellCheck": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to disable spell check and autocorrection"
          }
        ]
      },
      "childBefore": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom UI to render before textarea node (inside .textarea wrapper with focus state)"
          }
        ]
      },
      "childAfter": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom UI to render after textarea node (inside .textarea wrapper with focus state)"
          }
        ]
      },
      "icon": {
        "value": "type.OneOf([type.String, type.Object])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom Icon name or props to render before textarea node"
          }
        ]
      },
      "iconEnd": {
        "value": "type.OneOf([type.String, type.Object])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom Icon name or props to render after textarea node (if `onRemove` not defined)"
          }
        ]
      }
    }
  },
  "Tooltip": {
    "propTypes": {
      "children": {
        "value": "type.NodeOrFunction.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Tooltip content"
          }
        ]
      },
      "on": {
        "value": "type.OneOf([tooltipOnEnum, type.ListOf(tooltipOnEnum)])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " One of, or any combination of: 'hover', 'click'"
          }
        ]
      },
      "position": {
        "value": "type.Enum(['top', 'right', 'bottom', 'left'])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Location of the Tooltip relative to the parent element"
          }
        ]
      },
      "align": {
        "value": "type.Enum(['start', 'end'])",
        "comments": [
          {
            "type": "CommentJSDoc",
            "value": "\n Tooltip alignment relative to the `position`, default is center/middle alignment.\n   - `start === 'left'` and `end === 'right'` if position is 'top' or 'bottom'\n   - `start === 'top'` and `end === 'bottom'` if position is 'left' or 'right'\n   "
          }
        ]
      },
      "animation": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Animation CSS class to apply"
          }
        ]
      },
      "delay": {
        "value": "type.Millisecond",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Popup delay duration in milliseconds"
          }
        ]
      },
      "embedded": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to render Tooltip as child element of the parent Node, by default it renders as Portal"
          }
        ]
      },
      "offset": {
        "value": "type.Px",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Tooltip pointer offset from the parent element, default is `16`"
          }
        ]
      },
      "open": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to show Tooltip by default"
          }
        ]
      },
      "onOpen": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, self: object) => void - before Tooltip opens"
          }
        ]
      },
      "onClose": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, self: object) => void - before Tooltip closes"
          }
        ]
      },
      "onMount": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Callback(self: object) => void - when Tooltip container has mounted"
          }
        ]
      },
      "theme": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Name of the theme style to apply - must be one of the available themes"
          }
        ]
      },
      "tooltipClass": {
        "value": "type.ClassName",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Class name for the Tooltip container"
          }
        ]
      }
    }
  },
  "Upload": {
    "defaultProps": {
      "type": {
        "value": "'file'"
      },
      "hyphen": {
        "value": "true"
      },
      "loading": {
        "value": "false"
      },
      "iconSelect": {
        "value": "''"
      },
      "iconRemove": {
        "value": "''"
      },
      "onError": {
        "value": "(e, errors) => alert(errors.map((e) => e.message).join('\\n'))"
      }
    },
    "propTypes": {
      "accept": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Native HTML Comma-separated list of one or more file types allowed for upload"
          }
        ]
      },
      "children": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom label to show inside Upload dropzone, default is placeholder Icon or Text"
          }
        ]
      },
      "childBefore": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom UI to show inside Upload dropzone, before upload__label"
          }
        ]
      },
      "childAfter": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom UI to show inside Upload dropzone, after upload__label"
          }
        ]
      },
      "hyphen": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to hyphenate Text when it overflows width"
          }
        ]
      },
      "loading": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to show loading spinner and block input interaction"
          }
        ]
      },
      "maxFiles": {
        "value": "type.Number",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Maximum number of uploaded files (when `multiple` is true)"
          }
        ]
      },
      "maxSize": {
        "value": "type.Byte",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Maximum file(s) upload size limit in bytes (accumulative for `multiple` uploads)"
          }
        ]
      },
      "minSize": {
        "value": "type.Byte",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Minimum file(s) upload size limit in bytes (accumulative for `multiple` uploads)"
          }
        ]
      },
      "multiple": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to allow upload of more than one file"
          }
        ]
      },
      "iconSelect": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Icon name for selecting file upload, default is plus Icon"
          }
        ]
      },
      "iconRemove": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Icon name for removing file upload, default is cross Icon"
          }
        ]
      },
      "square": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to add 'squared' CSS class to make the dropzone fill available space as square"
          }
        ]
      },
      "value": {
        "value": "type.ListOf(type.File)",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Input files - if passed, becomes a controlled-like component"
          }
        ]
      },
      "defaultValue": {
        "value": "type.ListOf(type.File)",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Initial Input files for uncontrolled-like component"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, acceptedFiles: File[] | null, name?, self) when input value changes"
          }
        ]
      },
      "onError": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, {message: String, file?: File}[], name?, self) when input changes and validation fails"
          }
        ]
      },
      "onRemove": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, removedFiles: File[], name, self, callback) before input files are to be removed,"
          },
          {
            "type": "CommentLine",
            "value": " To use custom behavior, set event.preventDefault, then fire `callback()` yourself."
          },
          {
            "type": "CommentLine",
            "value": " The default behavior uses window.confirm() before calling `onChange` to remove files."
          }
        ]
      }
    }
  },
  "UploadGrid": {
    "defaultProps": {
      "maxFiles": {
        "value": "1"
      },
      "gap": {
        "value": "'1em'"
      },
      "previewAccept": {
        "value": "'image/*'"
      }
    },
    "propTypes": {
      "initialValues": {
        "value": "type.OneOf([type.ListOf(type.FileInput), type.FileInput])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Uploaded FileInput(s) value to render initially or to sync with"
          }
        ]
      },
      "onChange": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, fileInput(s), name, self) when file(s) change, receives all changed file(s) since initialization"
          }
        ]
      },
      "onChangeLast": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Similar to `onChange` callback, but receives only last changed file(s), will not call `onChange` if given"
          }
        ]
      },
      "onRemove": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Handler(event, fileInput(s), name, self, callback) before input files are to be removed,"
          },
          {
            "type": "CommentLine",
            "value": " To use custom behavior, set event.preventDefault, then fire `callback()` yourself."
          },
          {
            "type": "CommentLine",
            "value": " The default behavior uses window.confirm() before calling `onChange` to remove files."
          }
        ]
      },
      "multiple": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to get fileInput(s) as list, even if maxFiles = 1, ignored if `maxFiles > 1` or `types` is defined"
          }
        ]
      },
      "maxFiles": {
        "value": "type.Number",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Number of files that can be uploaded, ignored if `types` is defined"
          }
        ]
      },
      "maxColumns": {
        "value": "type.Number",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Maximum number of grid columns, default is the divisor of `maxFiles` closest to its square root"
          }
        ]
      },
      "gap": {
        "value": "type.CSSLength",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Spacing between grid slots, can be any CSS value, required if maxFiles > 1"
          }
        ]
      },
      "kind": {
        "value": "type.Any",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Type of file (added as attribute to new FileInput uploads)"
          }
        ]
      },
      "noPreview": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to disable selected/uploaded file(s) preview (aka images, video, etc.)"
          }
        ]
      },
      "noPreviewClean": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to disable automatic garbage clean to release memory for unused File previews"
          }
        ]
      },
      "preview": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom function preview(fileInput, index, self) or node to render for selected/uploaded file slot"
          }
        ]
      },
      "previewAccept": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Comma separated list of File MIME types or extensions, similar to <input accept=\"\"/> to enable File preview"
          }
        ]
      },
      "previewClass": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " CSS class to add to preview node"
          }
        ]
      },
      "square": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to add 'squared' CSS class to make the dropzone fill available space as square"
          }
        ]
      },
      "slotLabel": {
        "value": "type.OneOf([type.Boolean, type.Enum(['i'])])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to always show File label, like: incremental slot count, identifier type.name, or File.name."
          },
          {
            "type": "CommentLine",
            "value": " Pass `false` to disable File label (note: Upload component may still show list of files)"
          },
          {
            "type": "CommentLine",
            "value": " Pass `i` string to always show incremental count or type.name (if `types` given)"
          },
          {
            "type": "CommentLine",
            "value": " By default, File.name is shown when it has preview."
          }
        ]
      },
      "types": {
        "value": "type.ListOf(type.Definition.isRequired)",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Named Identifier definitions for each upload type in the grid, default is incremental count"
          }
        ]
      }
    }
  },
  "View": {
    "defaultProps": {
      "defaultProp": {
        "value": "true"
      }
    },
    "propTypes": {
      "className": {
        "value": "type.ClassName",
        "comments": [
          {
            "type": "CommentLine",
            "value": " CSS class names separated by space"
          }
        ]
      },
      "style": {
        "value": "type.Style",
        "comments": [
          {
            "type": "CommentLine",
            "value": " CSS style object with camelCase attribute keys"
          }
        ]
      },
      "col": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to use column layout, true if `row` is falsy by default"
          }
        ]
      },
      "row": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to use row layout, column by default"
          }
        ]
      },
      "grid": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to render as grid with automatic items distribution using flex wrap"
          }
        ]
      },
      "fill": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to make the view fill up available height and width"
          }
        ]
      },
      "reverse": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to reverse the order of rendering"
          }
        ]
      },
      "reverseScroll": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentJSDoc",
            "value": "\n Whether to use right to left scroll direction and place the scrollbar on the left.\n  - If `rtl` is true, the scroll direction is left to right and the scrollbar is on the right.\n  - To achieve left scrollbar without changing horizontal scroll direction,\n    restrict this Scroll component to allow only vertical scroll,\n    then create a nested Scroll component that can only scroll horizontally.\n @example:\n  <Scroll rtl={rtl} reverseScroll scrollAlongDirectionOnly>\n     <Scroll row scrollAlongDirectionOnly>...</Scroll>\n  </Scroll>\n     "
          }
        ]
      },
      "rtl": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to use right to left text, layout, and scroll direction"
          }
        ]
      },
      "left": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Align inner content to the start"
          }
        ]
      },
      "right": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Align inner content to the end"
          }
        ]
      },
      "top": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Align inner content to the top"
          }
        ]
      },
      "bottom": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Align inner content to the bottom"
          }
        ]
      },
      "center": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Align inner content to the center horizontally"
          }
        ]
      },
      "middle": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Align inner content to the middle vertically"
          }
        ]
      },
      "sound": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " @param {object|HTMLAudioElement} new Audio(URL) sound file to play on click"
          }
        ]
      },
      "children": {
        "value": "type.Node",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Inner content to render"
          }
        ]
      },
      "childBefore": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom UI to render before `children` in Scroll mode (outside inner Scroll component)"
          }
        ]
      },
      "childAfter": {
        "value": "type.NodeOrFunction",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Custom UI to render after `children` in Scroll mode (outside inner Scroll component)"
          }
        ]
      },
      "_ref": {
        "value": "type.Ref",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Ref for the View or outer Scroll container"
          }
        ]
      },
      "preventOffset": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentJSDoc",
            "value": "\n Whether to prevent components from setting size offset for this component.\n This can prevent bugs caused by children Scroll components with `scrollOffset` enabled.\n     "
          }
        ]
      },
      "scroll": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to make the View scrollable"
          }
        ]
      },
      "scrollAlongDirectionOnly": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to restrict scrolling along the layout direction."
          },
          {
            "type": "CommentLine",
            "value": " Scrollable in all directions by default."
          }
        ]
      },
      "scrollClass": {
        "value": "type.ClassName",
        "comments": [
          {
            "type": "CommentLine",
            "value": " CSS class for inner wrapper Scroll component"
          }
        ]
      },
      "scrollStyle": {
        "value": "type.Style",
        "comments": [
          {
            "type": "CommentLine",
            "value": " CSS style for inner wrapper Scroll component"
          }
        ]
      },
      "scrollRef": {
        "value": "type.Ref",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Ref for the inner Scroll component"
          }
        ]
      },
      "scrollProps": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Props for the inner Scroll component"
          }
        ]
      },
      "scrollOffset": {
        "value": "type.OneOf([type.Boolean, type.Enum(['height', 'width'])])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to allow Scroll element to set offset style to its parent element."
          },
          {
            "type": "CommentLine",
            "value": " The Scroll component may set max-width or max-height style to the parent"
          },
          {
            "type": "CommentLine",
            "value": " element in order for it to calculate the maximum available space correctly."
          },
          {
            "type": "CommentLine",
            "value": " Sometimes, this behavior leads to false positives, and needs to be disabled."
          }
        ]
      },
      "scrollOverflowProps": {
        "value": "type.OneOf([type.Obj({ top: type.Props, bottom: type.Props, left: type.Props, right: type.Props }), type.Boolean])",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Props for outer Scroll div when content overflows in given direction, set `false` to disable"
          }
        ]
      },
      "tooltip": {
        "value": "type.Tooltip",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Tooltip props or value to display as tooltip on hover"
          }
        ]
      }
    }
  },
  "VirtualList": {
    "defaultProps": {
      "fill": {
        "value": "true"
      },
      "scroll": {
        "value": "true"
      },
      "initialItems": {
        "value": "10"
      },
      "renderRadius": {
        "value": "true"
      }
    },
    "propTypes": {
      "items": {
        "value": "type.ListOf(type.Any).isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " List of items to render (can be an array of any value)"
          }
        ]
      },
      "initialItems": {
        "value": "type.Integer",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Number of items to render initially or when list `items` array changes"
          }
        ]
      },
      "grid": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to render as grid (alias for `scrollClass='row top wrap'` for col)"
          }
        ]
      },
      "row": {
        "value": "type.Boolean",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Whether to render as row of items"
          }
        ]
      },
      "renderItem": {
        "value": "type.Function",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Function(item, index, items, self) to render each item in the list, default is `renderProp()`"
          }
        ]
      },
      "renderRadius": {
        "value": "type.OneOf([type.Boolean, type.Percentage])",
        "comments": [
          {
            "type": "CommentJSDoc",
            "value": "\n Percentage of the visible list container size to pre-render items around.\n Set to `0` to only render items when they scroll into view.\n Set to `1` (ie. 100%) to render items within an area that is 3x the size of the view.\n Set to `true` to use automatic calculation based on scroll speed (this is default).\n  ┌─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─┐\n  │               ↑               │\n  │       renderRadius: 100%      │\n  │               ↓               │\n  ┌───────────────────────────────┐\n  │             start             │\n  │      view (visible area)      │\n  │              end              │\n  └───────────────────────────────┘\n  │               ↑               │\n  │       renderRadius: 100%      │\n  │               ↓               │\n  └─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─┘\n   "
          }
        ]
      }
    }
  },
  "VirtualListItem": {
    "propTypes": {
      "children": {
        "value": "type.NodeOrFunction.isRequired"
      }
    }
  },
  "CodeExample": {
    "propTypes": {
      "children": {
        "value": "type.Node.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Example source code"
          }
        ]
      },
      "source": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " `children` as literal source code string for documentation"
          }
        ]
      },
      "desc": {
        "value": "type.String",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Description text - default is \"Example\""
          }
        ]
      }
    }
  },
  "PropsTable": {
    "propTypes": {
      "component": {
        "value": "type.JSXElementType.isRequired",
        "comments": [
          {
            "type": "CommentJSDoc",
            "value": "\n React Component element type\n @example:\n  import { Button } from '@webframer/ui'\n  <PropsTable component={Button} />\n   "
          }
        ]
      },
      "manifest": {
        "value": "type.Object",
        "comments": [
          {
            "type": "CommentLine",
            "value": " Content of the `propTypes.json` manifest file compiled by [webframe-docs](https://www.npmjs.com/package/webframe-docs)"
          }
        ]
      }
    }
  },
  "Class": {
    "propTypes": {
      "uiStorageKey": {
        "value": "type.String.isRequired",
        "comments": [
          {
            "type": "CommentLine",
            "value": " UI State Storage Key"
          }
        ]
      },
      "...Class.propTypes": {}
    }
  }
}