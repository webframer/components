/// Generated by Webframe.app | Do not edit this file directly! \\\
import { type } from '../types';
export interface UploadGridProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Uploaded FileInput(s) value to render initially or to sync with
   */
  initialValues?: Array<{
    src?: string;
    kind?: any;
    i?: any;
    id?: string;
    name?: string;
    file?: {
      name: string;
      size: type.Byte;
      type: string;
    };
    remove?: boolean;
    width?: type.Px;
    height?: type.Px;
    size?: type.Byte;
    sizes?: Array<{
      key?: string;
      val?: type.Byte;
    }>;
  }> | {
    src?: string;
    kind?: any;
    i?: any;
    id?: string;
    name?: string;
    file?: {
      name: string;
      size: type.Byte;
      type: string;
    };
    remove?: boolean;
    width?: type.Px;
    height?: type.Px;
    size?: type.Byte;
    sizes?: Array<{
      key?: string;
      val?: type.Byte;
    }>;
  };
  /**
   * Handler(event, fileInput(s), name, self) when file(s) change, receives all changed file(s) since initialization
   */
  onChange?: Function;
  /**
   * Similar to `onChange` callback, but receives only last changed file(s), will not call `onChange` if given
   */
  onChangeLast?: Function;
  /**
   * Handler(event, fileInput(s), name, self, callback) before input files are to be removed,
   * 
   * To use custom behavior, set event.preventDefault, then fire `callback()` yourself.
   * 
   * The default behavior uses window.confirm() before calling `onChange` to remove files.
   */
  onRemove?: Function;
  /**
   * Whether to get fileInput(s) as list, even if maxFiles = 1, ignored if `maxFiles > 1` or `types` is defined
   */
  multiple?: boolean;
  /**
   * Number of files that can be uploaded, ignored if `types` is defined
   */
  maxFiles?: number;
  /**
   * Maximum number of grid columns, default is the divisor of `maxFiles` closest to its square root
   */
  maxColumns?: number;
  /**
   * Spacing between grid slots, can be any CSS value, required if maxFiles > 1
   */
  gap?: string;
  /**
   * Type of file (added as attribute to new FileInput uploads)
   */
  kind?: any;
  /**
   * Whether to disable selected/uploaded file(s) preview (aka images, video, etc.)
   */
  noPreview?: boolean;
  /**
   * Whether to disable automatic garbage clean to release memory for unused File previews
   */
  noPreviewClean?: boolean;
  /**
   * Custom function preview(fileInput, index, self) or node to render for selected/uploaded file slot
   */
  preview?: string | number | boolean | Function;
  /**
   * Comma separated list of File MIME types or extensions, similar to <input accept=""/> to enable File preview
   */
  previewAccept?: string;
  /**
   * CSS class to add to preview node
   */
  previewClass?: string;
  /**
   * Whether to add 'squared' CSS class to make the dropzone fill available space as square
   */
  square?: boolean;
  /**
   * Whether to always show File label, like: incremental slot count, identifier type.name, or File.name.
   * 
   * Pass `false` to disable File label (note: Upload component may still show list of files)
   * 
   * Pass `i` string to always show incremental count or type.name (if `types` given)
   * 
   * By default, File.name is shown when it has preview.
   */
  slotLabel?: boolean | 'i';
  /**
   * Named Identifier definitions for each upload type in the grid, default is incremental count
   */
  types?: Array<{
    _: any;
    en?: string;
  }>;
}
/**
 * Multiple Files Uploader in Grid Layout with optional File preview.
 * @see https://webframe.app/docs/ui/inputs/UploadGrid
 *
 * Differences from Upload.jsx component:
 *  - Accepts `initialValues` as `FileInput[]` to sync with backend schema and `final-form`.
 *  - `onChange` callback only sends changed fileInputs, not all files currently in state.
 *  - Uses Upload.jsx component internally for each upload slot.
 *  - Does not work with traditional form.submit(), because internal `value` are not File objects.
 *    Instead, use it with `final-form` submit API to send data to backend as props.
 *
 * Notes:
 *    - `value` is not used, only `initialValues` are used by UploadGrid,
 *      because if controlled `value` is used, we won't be able to collect the
 *      list of all uploaded/deleted/edited files since previous 'save' submission,
 *      since form input `value` will always be in sync with the current component state.
 *    - `defaultValue` is also not used, only `initialValues`
 */
export function UploadGrid(props: UploadGridProps): JSX.Element;

export default UploadGridMemo;
declare const UploadGridMemo: React.NamedExoticComponent<UploadGridProps>;
import * as React from 'react';
