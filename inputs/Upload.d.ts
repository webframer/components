/// Generated by Webframe.app | Do not edit this file directly! \\\
import { type } from '../types';
export interface UploadProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * A comma-separated list of one or more file types allowed for upload. Examples of valid values:
   * 1. Filename extension: `.svg`, `.jpg`...
   * 2. File type wildcard: `image/*`, `video/*`...
   * 3. MIME type: `image/jpeg`, `application/pdf`...
   * 4. Any combination of above: `image/*, .pdf`.
   * 
   * For more details, refer to [**accept** specs](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept#unique_file_type_specifiers).
   */
  accept?: string;
  /**
   * Custom label to show inside Upload dropzone, default is placeholder Icon or Text
   */
  children?: string | number | boolean | Function;
  /**
   * Custom UI to show inside Upload dropzone, before upload__label
   */
  childBefore?: string | number | boolean | Function;
  /**
   * Custom UI to show inside Upload dropzone, after upload__label
   */
  childAfter?: string | number | boolean | Function;
  /**
   * Whether to hyphenate Text when it overflows width
   */
  hyphen?: boolean;
  /**
   * Whether to show loading spinner and block input interaction
   */
  loading?: boolean;
  /**
   * Maximum number of uploaded files (when `multiple` is true)
   */
  maxFiles?: number;
  /**
   * Maximum file(s) upload size limit in bytes (accumulative for `multiple` uploads)
   */
  maxSize?: type.Byte;
  /**
   * Minimum file(s) upload size limit in bytes (accumulative for `multiple` uploads)
   */
  minSize?: type.Byte;
  /**
   * Whether to allow upload of more than one file
   */
  multiple?: boolean;
  /**
   * Icon name for selecting file upload, default style is `plus` Icon for empty string
   */
  iconSelect?: string;
  /**
   * Icon name for removing file upload, default style is `cross` Icon for empty string
   */
  iconRemove?: string;
  /**
   * Whether to add `squared` CSS class to make the dropzone fill available space as square
   */
  square?: boolean;
  /**
   * Input files - if passed, becomes a controlled-like component
   */
  value?: Array<{
    name: string;
    size: type.Byte;
    type: string;
  }>;
  /**
   * Initial Input files for uncontrolled-like component
   */
  defaultValue?: Array<{
    name: string;
    size: type.Byte;
    type: string;
  }>;
  /**
   * Handler(event, acceptedFiles: File[] | null, name?, self) when input value changes
   */
  onChange?: Function;
  /**
   * Handler(event, {message: String, file?: File}[], name?, self) when input changes and validation fails
   */
  onError?: Function;
  /**
   * Handler(event, removedFiles: File[], name, self, callback) before input files are to be removed,
   * 
   * To use custom behavior, set event.preventDefault, then fire `callback()` yourself.
   * 
   * The default behavior uses window.confirm() before calling `onChange` to remove files.
   */
  onRemove?: Function;
}
/**
 * File Uploader Input component that works with native HTML form submit.
 * @see https://webframe.app/docs/ui/inputs/Upload
 *
 * Notes:
 *  - Image preview should be delegated to UploadGrid because each Upload slot will be multiple,
 *    but shows a File preview for only given slot index, while spreading the rest to other slots.
 *  - This Upload component should remain simple and performant to keep separation of concerns.
 *  - Input of type 'file' is a special use case that should not have controlled state (see in code)
 *  - Error messages is to be displayed by the generic Input wrapper with label and info,
 *    this component only provides specific behaviors related to file upload with onError callback.
 *  - accept attribute passed to input does not guarantee correct files because users can change it
 *  - disabled inputs cannot have focus and cannot open file dialog by default.
 *  - readonly input of type file still allows opening the dialog onClick and Enter/Space press.
 *    => this behavior needs to be disabled, without setting `disabled`
 *       because the form will not submit disabled inputs.
 */
export function Upload(props: UploadProps): JSX.Element;

export default UploadMemo;
declare const UploadMemo: React.NamedExoticComponent<UploadProps>;
import * as React from 'react';
