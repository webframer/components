/// Generated by Webframe.app | Do not edit this file directly! \\\
export interface InputNativeProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Whether to use minimal width that fits content, pass number for additional character offset
   */
  compact?: boolean | number;
  /**
   * Whether to lock input value when `value` prop is given
   */
  controlledValue?: boolean;
  /**
   * Initial value for uncontrolled state
   */
  defaultValue?: any;
  /**
   * Internal value for controlled state
   */
  value?: any;
  /**
   * Handler(event, value: any, name?: string, self) on input value changes
   */
  onChange?: Function;
  /**
   * Handler(event, value: any, name?: string, self) on input focus
   */
  onFocus?: Function;
  /**
   * Handler(event, value: any, name?: string, self) on input blur
   */
  onBlur?: Function;
  /**
   * Handler(event, value: any, name?: string, self) on input removal.
   * 
   * `onChange` handler will fire after with `null` as value, unless event.preventDefault().
   * 
   * To let `onChange` update form instance first before removing the field,
   * 
   * use setTimeout to execute code inside `onRemove` handler.
   */
  onRemove?: Function;
  /**
   * Label to show before the input (or after with `reverse` true)
   */
  label?: string | number | boolean | Function;
  /**
   * Whether input is loading
   */
  loading?: boolean;
  /**
   * Function(value, name?, self) => string - internal value formatter for native input (UI display)
   */
  format?: Function;
  /**
   * Function(value, name?, self, event) => any - value parser for onChange/onBlur/onFocus handlers
   */
  parse?: Function;
  /**
   * Function(value, name?, self, event) => string - internal value normalizer to sanitize user input
   */
  normalize?: Function;
  /**
   * Prefix to show before the Input value text
   */
  prefix?: string | number | boolean | Function;
  /**
   * Suffix to show after the Input value text (value must be non-empty)
   */
  suffix?: string | number | boolean | Function;
  /**
   * Whether to persist placeholder as user enters text
   */
  stickyPlaceholder?: boolean;
  /**
   * Whether to disable spell check and autocorrection
   */
  noSpellCheck?: boolean;
  /**
   * Custom UI to render before input node (inside .input wrapper with focus state)
   */
  childBefore?: string | number | boolean | Function;
  /**
   * Custom UI to render after input node (inside .input wrapper with focus state)
   */
  childAfter?: string | number | boolean | Function;
  /**
   * Custom Icon name or props to render before input node
   */
  icon?: string | boolean | object | number | Function;
  /**
   * Custom Icon name or props to render after input node (if `onRemove` not defined)
   */
  iconEnd?: string | boolean | object | number | Function;
}
/**
 * Wrapper for Native HTML Input, such as: 'text', 'number', 'email', etc. where value is text.
 *
 * Features:
 *  1. format and parse functions
 *  2. Label added before input
 *  3. Icon at the start or end of input
 *  4. Input prefix/suffix (ex.currency prefix or suffix for number input)
 *  5. Loading state (with spinner icon and temporarily readonly input)
 *  6. Controlled or uncontrolled input value state
 *  7. Compact input with automatic width adjustment
 *  8. onRemove handler for removing the input field
 *  9. Sticky placeholder that persists as user enters text
 *  10. todo: improvement - Floating Label style
 */
export function InputNative(props: InputNativeProps): JSX.Element;

/**
 * Icon Before and After Input Renderer
 * @param {string|object|function} icon - name string, props object, or render function
 * @param {object} self - function Component instance
 * @param {object} [props]:
 * @param {string} props.id - input id
 * @param {object} props[props] - Label props
 * @returns {JSX.Element}
 */
export function renderInputIcon(icon: string | object | Function, self: object, { id, ...props }?: {
    id: string;
} | undefined): JSX.Element;
/**
 * Input Label
 * @param {string|function|object} label - string, render function, or JSX
 * @param {object} self - function Component instance
 * @param {object} [props]:
 *   {boolean} [required] - whether input is required
 *   {string} [className]
 * @returns {JSX.Element}
 */
export function renderInputLabel(label: string | Function | object, self: object, { required, className }?: object | undefined): JSX.Element;
/**
 * Common Input Behaviors Setup for all native `<input>` elements
 * @example:
 *  function MyComponent ({className, float, error, loading, ...props}) {
 *    const viewProps = extractViewProps(props)
 *    let {
 *      active, compact, disabled, loading, readonly,
 *      childBefore, childAfter, id, icon, iconEnd, label, prefix, suffix, input, self,
 *    } = useInputSetup(props)
 *  }
 * @param {object} component props to process
 * @param {object} [enabled] - optional props config to optimize for performance
 */
export function useInputSetup({ type, id, compact, controlledValue, float, format, parse, normalize, icon, iconEnd, label, prefix, suffix, onRemove, noSpellCheck, stickyPlaceholder, loading, childBefore, childAfter, inputRef, initialValues: _1, ...input }: object, enabled?: object | undefined, ...args: any[]): {
    active: any;
    compact: any;
    disabled: any;
    loading: any;
    readonly: any;
    hasValue: boolean;
    value: any;
    childBefore: any;
    childAfter: any;
    id: any;
    icon: any;
    iconEnd: any;
    label: any;
    prefix: any;
    suffix: any;
    stickyPlaceholder: any;
    input: {};
    self: object;
};
export const formatByType: {};
export namespace parseByType {
    function number(v: any): any;
}
export namespace inputEnabledOptions {
    let childBefore_1: boolean;
    export { childBefore_1 as childBefore };
    let childAfter_1: boolean;
    export { childAfter_1 as childAfter };
    let compact_1: boolean;
    export { compact_1 as compact };
    let icon_1: boolean;
    export { icon_1 as icon };
    let label_1: boolean;
    export { label_1 as label };
    let prefix_1: boolean;
    export { prefix_1 as prefix };
    let suffix_1: boolean;
    export { suffix_1 as suffix };
}
export namespace noSpellCheckProps {
    let autoComplete: string;
    let autoCorrect: string;
    let autoCapitalize: string;
    let spellCheck: boolean;
}
export default InputNativeMemo;
declare const InputNativeMemo: React.NamedExoticComponent<InputNativeProps>;
import * as React from 'react';
