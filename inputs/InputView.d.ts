/// Generated by Webframe.app | Do not edit this file directly! \\\
export interface InputViewProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * View Component `type` to use (as defined by Input `controls` prop)
   */
  viewType?: string;
  /**
   * Universal Input Component to use (must render inner `<input/>` by `type`, including `viewType`)
   */
  Input?: unknown;
  /**
   * Number of clicks to turn into Input, set as 2 for Double Click, default is single click
   */
  inputClicks?: 1 | 2;
  /**
   * List of props to remove when in View state (ie. for Input state only)
   */
  inputOnlyAttrs?: Array<string>;
  /**
   * Props to use for Input state only
   */
  inputProps?: object;
  /**
   * Props to use for View state only
   */
  viewProps?: object;
}
/**
 * Input with dynamic types that switches between View (`viewType`) and Input (`type`) Control
 * on single/double click, and back on Blur/Enter/Escape events:
 *
 *  - `viewType` and `type` can be native or any custom input `type` defined by `controls` prop.
 *  - View state allows dragging to reorder, and single/double click to edit Input,
 *    whereas dragging Input becomes text selection (ie. highlight text).
 *  - View state can use any Component, not just View, by setting `viewType`.
 *    The same goes for Input, by setting `type`.
 *  - Drag events do not fire `onClick`.
 *
 * Requirements:
 *  1. Input Control component has similar logic to `useInputValue` because `format` is removed.
 *  2. Input Control component has `value` state attached to `self.state.value` or
 *     `event.target.value` for `onBlur` and `onKeyUp` events.
 *     See `self.getStateValue` for reference.
 *
 * @example:
 * ┌────── <InputView/> ─────┐  ┌───────── <Input/> ──────────┐
 * │                         │  │    (Universal Component)    │
 * │ View state:  viewType ─┐│  │                             │
 * │           OR           ├───┼─────> controls[type]        │
 * │ Input state:    type  ─┘│  │      ┌──────┴──────┐        │
 * │           +             │  │      ↓             ↓        │
 * │     (value cache)       │  │  <View/>   <InputNative/>   │
 * │           ↑             │  │                    │        │
 * └───────────│─────────────┘  └────────────────────│────────┘
 *             └─────────────────────────────────────┘
 * Logic:
 *    - `onChange` event only fires on Blur/Enter events from Input,
 *      => to subscribe to any Input value changes while typing, use `onInput` events
 *    - Escape key press will discard any changes made to Input, and simulate `onBlur` event.
 *    - `onClick` and `onDoubleClick` handlers are removed when in Input state.
 *    - It's possible to pass both `onClick` and `onDoubleClick` handlers (see below).
 *
 * Notes:
 *    - React only has single or double click events.
 *    - The default React behavior, if both handlers are passed, is:
 *      1. the `onClick` fires twice,
 *      2. then `onDoubleClick` event fires after.
 *    - When `inputClicks >= 2` or `onDoubleClick` handler exists,
 *      this component skips `onClick` event when `onDoubleClick` fires with a delay,
 *      treating `onClick` as single or more than two clicks event.
 *    - `onClick` event can check the count of clicks with `event.detail: number`.
 *
 * Architecture:
 *    - Inner `<input/>` Components can have their own logic to manage internal `state.value`
 *      using `format` functions. Thus, we must keep it dry and sync with that `state.value`,
 *      to avoid calling `format` functions twice.
 *    - View state is designed for readonly UI, so it should derive value from inner `<input/>`
 *    - Cache inner `<input/>` state to render View after edit, and when switching back to Input.
 *      Alternatively, render both View and Input, then hide one of them - requires syncing.
 *      => Cache approach has simpler logic and is more performant with clean markup.
 */
export function InputView(props: InputViewProps): JSX.Element;

export default InputViewMemo;
declare function ViewWithLabel({ className, label, value, childBefore, childAfter, type, ...props }: {
    [x: string]: any;
    className: any;
    label: any;
    value: any;
    childBefore: any;
    childAfter: any;
    type: any;
}): JSX.Element;
import { Input } from './Input.js';
declare const InputViewMemo: React.NamedExoticComponent<InputViewProps>;
import * as React from 'react';
