/// Generated by Webframe.app | Do not edit this file directly! \\\
import { type } from '../types';
export interface InputProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * Native input `type` attribute, also a key identifier for delegated input controls.
   * See [input type examples](#input-types).
   */
  type?: string;
  /**
   * Unique input identifier, default is string created from React.useId()
   */
  id?: string;
  /**
   * Help information to show after the Input
   */
  info?: string | number | boolean | Function;
  /**
   * Error message to show after the Input (ex. on validation fail)
   */
  error?: string | number | boolean | Function;
  /**
   * Whether to enable input info/error animation transition (or expandCollapse transition options)
   */
  helpTransition?: boolean | object;
  /**
   * Whether to make input take only the minimum content width necessary
   */
  compact?: boolean;
  /**
   * Map of Input Control components by their `type` string to use for rendering
   */
  controls?: unknown;
  /**
   * Props to pass to Input Control component
   */
  controlProps?: object;
  /**
   * Tooltip props (or content) to display as popup on interaction with this component
   */
  tooltip?: string | number | boolean | Function | {
    children: string | number | boolean | Function;
    on?: 'click' | 'focus' | 'hover' | Array<'click' | 'focus' | 'hover'>;
    position?: 'top' | 'right' | 'bottom' | 'left';
    align?: 'start' | 'end';
    animation?: string;
    delay?: type.Millisecond;
    embedded?: boolean;
    offset?: type.Px;
    openInitially?: boolean;
    onOpen?: Function;
    onClose?: Function;
    onMount?: Function;
    theme?: string;
    /**
     * CSS class names as string, separated by space
     */
    tooltipClass?: string;
  };
}
/**
 * Universal Input group that wraps the corresponding Input Control component based on given `type`.
 * @see https://webframe.app/docs/ui/inputs/Input
 * Features:
 *  - Info/Error node added below delegated component
 *  - Tooltip support (since this wrapper does not have overflow: hidden).
 *
 * Notes:
 *  - To avoid complicated logic, Input will always show `info` node if given.
 *    User can always use `tooltip` prop to display additional input information on hover.
 */
export function Input(props: InputProps): JSX.Element;

export const inputControls: any;
export default InputMemo;
declare const InputMemo: React.NamedExoticComponent<InputProps>;
import * as React from 'react';
